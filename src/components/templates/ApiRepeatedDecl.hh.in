%%ns_indent%%  public: class %%field_name%%Repeated
%%ns_indent%%  {
%%ns_indent%%    /// \brief constructor
%%ns_indent%%    public: %%field_name%%Repeated(%%class_name%%Storage *_storage);

%%ns_indent%%    /// \brief private implementation
%%ns_indent%%    private: %%class_name%%Storage *dataPtr;

%%ns_indent%%    /// \brief destructor
%%ns_indent%%    public: ~%%field_name%%Repeated();

%%ns_indent%%    /// \brief Change number of elements in container
%%ns_indent%%    /// \param[in] _num new size
%%ns_indent%%    public: void Resize(std::size_t _num);

%%ns_indent%%    /// \brief Remove all elements from the container
%%ns_indent%%    public: void Clear();

%%ns_indent%%    /// \brief Number of elements in the container
%%ns_indent%%    public: std::size_t Size();

%%ns_indent%%    /// \brief Remove element at a position in the container
%%ns_indent%%    /// \param[in] _idx position to remove element
%%ns_indent%%    public: void Remove(std::size_t _idx);

%%ns_indent%%    /// \brief Access element
%%ns_indent%%    /// \param[in] _idx index of element
%%ns_indent%%    public: %%field_type%% &operator[](std::size_t _idx);

%%ns_indent%%    /// \brief Access element
%%ns_indent%%    /// \param[in] _idx index of element
%%ns_indent%%    public: const %%field_type%% &operator[](std::size_t _idx) const;

%%ns_indent%%    /// \brief Access element with bounds checking
%%ns_indent%%    /// \param[in] _idx index of element
%%ns_indent%%    public: %%field_type%% &At(std::size_t _idx);

%%ns_indent%%    /// \brief Access element with bounds checking
%%ns_indent%%    /// \param[in] _idx index of element
%%ns_indent%%    public: const %%field_type%% &At(std::size_t _idx) const;
%%ns_indent%%  };

%%ns_indent%%  public: %%field_name%%Repeated %%field_name%%();

%%ns_indent%%  /// \remarks read-ony API for const components
%%ns_indent%%  public: const %%field_name%%Repeated %%field_name%%() const;
